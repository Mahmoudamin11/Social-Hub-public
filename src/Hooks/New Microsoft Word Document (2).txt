import { useState, useRef, useEffect, useMemo } from "react";
import { FaBell, FaTimes } from "react-icons/fa";
import { formatDate } from "../../../Utils/formatDate";
import NotificationsHook from "../../../Hooks/NotificationsHook";
import Loader from "../../../Utils/Loader";
import { io } from "socket.io-client";

const Notifications = () => {
  const [isOpen, setIsOpen] = useState(false);
  const menuRef = useRef();

  const {
    notifications,
    unreadNotifications,
    loadingGeneral,
    loadingNotifications,
    fetchNotifications,
    fetchUnreadNotifications,
    markAllAsRead,
  } = NotificationsHook();

  // Initialize Socket.IO
  const socket = useMemo(() => io("http://localhost:5000"), []);

  useEffect(() => {
    // Handle new notifications in real-time
    socket.on("new-notification", (notification) => {
      console.log("New notification received:", notification);
      fetchUnreadNotifications();
    });

    return () => {
      socket.disconnect();
    };
  }, [socket, fetchUnreadNotifications]);

  const handelMarkAllAsRead = async () => {
    await markAllAsRead();
    fetchUnreadNotifications();
  };

  const handleClickOutside = (event) => {
    if (menuRef.current && !menuRef.current.contains(event.target)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    fetchUnreadNotifications();
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  useEffect(() => {
    fetchUnreadNotifications();
  }, [unreadNotifications.length]);

  return (
    <div className="relative" ref={menuRef}>
      {/* Bell Icon with Notification Count */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="text-gray-600 hover:text-gray-800 relative mt-2"
      >
        <FaBell size={20} />
        <span className="absolute -top-1.5 -right-1.5 bg-main-color text-white text-xs rounded-full w-[18px] h-[18px] flex items-center justify-center">
          {unreadNotifications?.length}
        </span>
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute -right-3.5 mt-2 w-[260px] sm:w-[400px] bg-c-bg1 rounded shadow-2xl z-50">
          <div className="flex items-center bg-c-white justify-between space-x-2 px-3 py-2 border-b-2 border-h-bg1">
            <h2 className="text-lg font-bold text-c-black">Notifications</h2>
            <FaTimes
              className="text-red-500 bg-c-white text-lg cursor-pointer"
              onClick={() => setIsOpen(false)}
            />
          </div>
          <div className="max-h-[262px] overflow-y-auto">
            {loadingGeneral ? (
              <div className="flex justify-center items-center py-4">
                <Loader width={"30px"} />
              </div>
            ) : unreadNotifications.length > 0 ? (
              unreadNotifications.map((notification, index) => (
                <div
                  key={index}
                  className="flex items-start border-b border-h-bg1 px-4 py-2 hover:bg-c-bg2"
                >
                  <div className="space-y-1">
                    <p className="text-c-black font-semibold text-sm">
                      {notification.message}
                    </p>
                    <p className="text-xs text-gray-400">
                      {formatDate(notification.createdAt)}
                    </p>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-4 text-gray-500">
                No new notifications.
              </div>
            )}
          </div>
          <div className="flex justify-between text-white font-semibold">
            <button
              onClick={fetchNotifications}
              className="px-4 py-2 text-sm w-1/2 border-r bg-sec-color hover:bg-main-color"
            >
              Show old notifications
            </button>
            <button
              onClick={handelMarkAllAsRead}
              disabled={unreadNotifications.length === 0 || loadingNotifications}
              className="px-4 py-2 text-sm w-1/2 bg-sec-color hover:bg-main-color"
            >
              Mark all as read
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Notifications;





























import { useState, useCallback, useEffect, useMemo } from "react";
import axios from "axios";
import Cookies from "js-cookie";
import { API } from "../Api/Api";
import { showToast } from "../Utils/showToast";
import { io } from "socket.io-client";

const NotificationsHook = () => {
  const userId = Cookies.get("userID");

  const [notifications, setNotifications] = useState([]);
  const [unreadNotifications, setUnreadNotifications] = useState([]);
  const [readNotifications, setReadNotifications] = useState([]);
  const [loadingGeneral, setLoadingGeneral] = useState(false);
  const [loadingNotifications, setloadingNotifications] = useState(false);

  // Initialize Socket.IO
  const socket = useMemo(() => io("http://localhost:5000"), []);

  const apiUrls = useMemo(
    () => ({
      fetchNotifications: `${API.getNotifications10By10}/${userId}`,
      fetchUnreadNotifications: `${API.getNotificationsNotReaded}/${userId}`,
      markAllAsRead: `${API.markIsReadNotifications}/${userId}`,
    }),
    [userId]
  );

  const fetchData = async (url, setState, setLoading) => {
    setLoading(true);
    try {
      const response = await axios.get(url);
      setState(response.data);
    } catch (error) {
      console.error(`Error fetching`, error);
      showToast("Error", error.response?.message || "Failed to fetch data");
    } finally {
      setLoading(false);
    }
  };

  const fetchNotifications = useCallback(() => {
    fetchData(
      apiUrls.fetchNotifications,
      setNotifications,
      setloadingNotifications
    );
  }, [apiUrls]);

  const fetchUnreadNotifications = useCallback(() => {
    fetchData(
      apiUrls.fetchUnreadNotifications,
      setUnreadNotifications,
      setLoadingGeneral
    );
  }, [apiUrls]);

  const markAllAsRead = useCallback(async () => {
    await fetchData(
      apiUrls.markAllAsRead,
      setReadNotifications,
      setLoadingGeneral
    );
  }, [apiUrls]);

  useEffect(() => {
    socket.on("new-notification", (notification) => {
      console.log("Real-time notification received:", notification);
      setUnreadNotifications((prev) => [...prev, notification]);
    });

    return () => {
      socket.disconnect();
    };
  }, [socket]);

  return {
    notifications,
    unreadNotifications,
    loadingGeneral,
    loadingNotifications,
    fetchNotifications,
    fetchUnreadNotifications,
    markAllAsRead,
  };
};

export default NotificationsHook;







